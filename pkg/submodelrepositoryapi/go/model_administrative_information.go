// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DotAAS Part 2 | HTTP/REST | Submodel Repository Service Specification
 *
 * The entire Submodel Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023
 *
 * API version: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 */

package openapi




type AdministrativeInformation struct {

	EmbeddedDataSpecifications []EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`

	Version AdministrativeInformationAllOfVersion `json:"version,omitempty"`

	Revision AdministrativeInformationAllOfRevision `json:"revision,omitempty"`

	Creator Reference `json:"creator,omitempty"`

	TemplateId string `json:"templateId,omitempty" validate:"regexp=^([\\\\x09\\\\x0a\\\\x0d\\\\x20-\\\\ud7ff\\\\ue000-\\\\ufffd]|\\\\ud800[\\\\udc00-\\\\udfff]|[\\\\ud801-\\\\udbfe][\\\\udc00-\\\\udfff]|\\\\udbff[\\\\udc00-\\\\udfff])*$"`
}

// AssertAdministrativeInformationRequired checks if the required fields are not zero-ed
func AssertAdministrativeInformationRequired(obj AdministrativeInformation) error {
	for _, el := range obj.EmbeddedDataSpecifications {
		if err := AssertEmbeddedDataSpecificationRequired(el); err != nil {
			return err
		}
	}
	if err := AssertAdministrativeInformationAllOfVersionRequired(obj.Version); err != nil {
		return err
	}
	if err := AssertAdministrativeInformationAllOfRevisionRequired(obj.Revision); err != nil {
		return err
	}
	if err := AssertReferenceRequired(obj.Creator); err != nil {
		return err
	}
	return nil
}

// AssertAdministrativeInformationConstraints checks if the values respects the defined constraints
func AssertAdministrativeInformationConstraints(obj AdministrativeInformation) error {
	for _, el := range obj.EmbeddedDataSpecifications {
		if err := AssertEmbeddedDataSpecificationConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertAdministrativeInformationAllOfVersionConstraints(obj.Version); err != nil {
		return err
	}
	if err := AssertAdministrativeInformationAllOfRevisionConstraints(obj.Revision); err != nil {
		return err
	}
	if err := AssertReferenceConstraints(obj.Creator); err != nil {
		return err
	}
	return nil
}
