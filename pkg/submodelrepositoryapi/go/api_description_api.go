// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DotAAS Part 2 | HTTP/REST | Submodel Repository Service Specification
 *
 * The entire Submodel Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023
 *
 * API version: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 */

package openapi

import (
	"net/http"
	"strings"
	
)

// DescriptionAPIAPIController binds http requests to an api service and writes the service results to the http response
type DescriptionAPIAPIController struct {
	service DescriptionAPIAPIServicer
	errorHandler ErrorHandler
}

// DescriptionAPIAPIOption for how the controller is set up.
type DescriptionAPIAPIOption func(*DescriptionAPIAPIController)

// WithDescriptionAPIAPIErrorHandler inject ErrorHandler into controller
func WithDescriptionAPIAPIErrorHandler(h ErrorHandler) DescriptionAPIAPIOption {
	return func(c *DescriptionAPIAPIController) {
		c.errorHandler = h
	}
}

// NewDescriptionAPIAPIController creates a default api controller
func NewDescriptionAPIAPIController(s DescriptionAPIAPIServicer, opts ...DescriptionAPIAPIOption) *DescriptionAPIAPIController {
	controller := &DescriptionAPIAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DescriptionAPIAPIController
func (c *DescriptionAPIAPIController) Routes() Routes {
	return Routes{
		"GetDescription": Route{
			strings.ToUpper("Get"),
			"/api/v3.0/description",
			c.GetDescription,
		},
	}
}

// GetDescription - Returns the self-describing information of a network resource (ServiceDescription)
func (c *DescriptionAPIAPIController) GetDescription(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetDescription(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
