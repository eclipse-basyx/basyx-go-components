// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DotAAS Part 2 | HTTP/REST | Submodel Repository Service Specification
 *
 * The entire Submodel Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023
 *
 * API version: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 */

package openapi


import (
	"fmt"
)



type ModelType string

// List of ModelType
const (
	MODELTYPE_ANNOTATED_RELATIONSHIP_ELEMENT ModelType = "AnnotatedRelationshipElement"
	MODELTYPE_ASSET_ADMINISTRATION_SHELL ModelType = "AssetAdministrationShell"
	MODELTYPE_BASIC_EVENT_ELEMENT ModelType = "BasicEventElement"
	MODELTYPE_BLOB ModelType = "Blob"
	MODELTYPE_CAPABILITY ModelType = "Capability"
	MODELTYPE_CONCEPT_DESCRIPTION ModelType = "ConceptDescription"
	MODELTYPE_DATA_SPECIFICATION_IEC61360 ModelType = "DataSpecificationIec61360"
	MODELTYPE_ENTITY ModelType = "Entity"
	MODELTYPE_FILE ModelType = "File"
	MODELTYPE_MULTI_LANGUAGE_PROPERTY ModelType = "MultiLanguageProperty"
	MODELTYPE_OPERATION ModelType = "Operation"
	MODELTYPE_PROPERTY ModelType = "Property"
	MODELTYPE_RANGE ModelType = "Range"
	MODELTYPE_REFERENCE_ELEMENT ModelType = "ReferenceElement"
	MODELTYPE_RELATIONSHIP_ELEMENT ModelType = "RelationshipElement"
	MODELTYPE_SUBMODEL ModelType = "Submodel"
	MODELTYPE_SUBMODEL_ELEMENT_COLLECTION ModelType = "SubmodelElementCollection"
	MODELTYPE_SUBMODEL_ELEMENT_LIST ModelType = "SubmodelElementList"
)

// AllowedModelTypeEnumValues is all the allowed values of ModelType enum
var AllowedModelTypeEnumValues = []ModelType{
	"AnnotatedRelationshipElement",
	"AssetAdministrationShell",
	"BasicEventElement",
	"Blob",
	"Capability",
	"ConceptDescription",
	"DataSpecificationIec61360",
	"Entity",
	"File",
	"MultiLanguageProperty",
	"Operation",
	"Property",
	"Range",
	"ReferenceElement",
	"RelationshipElement",
	"Submodel",
	"SubmodelElementCollection",
	"SubmodelElementList",
}

// validModelTypeEnumValue provides a map of ModelTypes for fast verification of use input
var validModelTypeEnumValues = map[ModelType]struct{}{
	"AnnotatedRelationshipElement": {},
	"AssetAdministrationShell": {},
	"BasicEventElement": {},
	"Blob": {},
	"Capability": {},
	"ConceptDescription": {},
	"DataSpecificationIec61360": {},
	"Entity": {},
	"File": {},
	"MultiLanguageProperty": {},
	"Operation": {},
	"Property": {},
	"Range": {},
	"ReferenceElement": {},
	"RelationshipElement": {},
	"Submodel": {},
	"SubmodelElementCollection": {},
	"SubmodelElementList": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelType) IsValid() bool {
	_, ok := validModelTypeEnumValues[v]
	return ok
}

// NewModelTypeFromValue returns a pointer to a valid ModelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelTypeFromValue(v string) (ModelType, error) {
	ev := ModelType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ModelType: valid values are %v", v, AllowedModelTypeEnumValues)
}



// AssertModelTypeRequired checks if the required fields are not zero-ed
func AssertModelTypeRequired(obj ModelType) error {
	return nil
}

// AssertModelTypeConstraints checks if the values respects the defined constraints
func AssertModelTypeConstraints(obj ModelType) error {
	return nil
}
