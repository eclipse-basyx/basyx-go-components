// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DotAAS Part 2 | HTTP/REST | Submodel Repository Service Specification
 *
 * The entire Submodel Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023
 *
 * API version: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 */

package openapi




type SubmodelElementChoice struct {

	Extensions []Extension `json:"extensions,omitempty"`

	Category string `json:"category,omitempty"`

	IdShort string `json:"idShort,omitempty"`

	DisplayName []LangStringNameType `json:"displayName,omitempty"`

	Description []LangStringTextType `json:"description,omitempty"`

	ModelType string `json:"modelType"`

	SemanticId Reference `json:"semanticId,omitempty"`

	SupplementalSemanticIds []Reference `json:"supplementalSemanticIds,omitempty"`

	Qualifiers []Qualifier `json:"qualifiers,omitempty"`

	EmbeddedDataSpecifications []EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`

	First Reference `json:"first"`

	Second Reference `json:"second"`

	Annotations []DataElementChoice `json:"annotations,omitempty"`

	Observed Reference `json:"observed"`

	Direction Direction `json:"direction"`

	State StateOfEvent `json:"state"`

	MessageTopic string `json:"messageTopic,omitempty"`

	MessageBroker Reference `json:"messageBroker,omitempty"`

	LastUpdate string `json:"lastUpdate,omitempty"`

	MinInterval string `json:"minInterval,omitempty"`

	MaxInterval string `json:"maxInterval,omitempty"`

	Value []SubmodelElementChoice `json:"value,omitempty"`

	ContentType FileAllOfContentType `json:"contentType"`

	Statements []SubmodelElementChoice `json:"statements,omitempty"`

	EntityType EntityType `json:"entityType"`

	GlobalAssetId string `json:"globalAssetId,omitempty"`

	SpecificAssetIds []SpecificAssetId `json:"specificAssetIds,omitempty"`

	ValueId Reference `json:"valueId,omitempty"`

	InputVariables []OperationVariable `json:"inputVariables,omitempty"`

	OutputVariables []OperationVariable `json:"outputVariables,omitempty"`

	InoutputVariables []OperationVariable `json:"inoutputVariables,omitempty"`

	ValueType DataTypeDefXsd `json:"valueType"`

	Min string `json:"min,omitempty"`

	Max string `json:"max,omitempty"`

	OrderRelevant bool `json:"orderRelevant,omitempty"`

	SemanticIdListElement Reference `json:"semanticIdListElement,omitempty"`

	TypeValueListElement AasSubmodelElements `json:"typeValueListElement"`

	ValueTypeListElement DataTypeDefXsd `json:"valueTypeListElement,omitempty"`
}

// AssertSubmodelElementChoiceRequired checks if the required fields are not zero-ed
func AssertSubmodelElementChoiceRequired(obj SubmodelElementChoice) error {
	elements := map[string]interface{}{
		"modelType": obj.ModelType,
		"first": obj.First,
		"second": obj.Second,
		"observed": obj.Observed,
		"direction": obj.Direction,
		"state": obj.State,
		"contentType": obj.ContentType,
		"entityType": obj.EntityType,
		"valueType": obj.ValueType,
		"typeValueListElement": obj.TypeValueListElement,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Extensions {
		if err := AssertExtensionRequired(el); err != nil {
			return err
		}
	}
	if err := AssertReferableAllOfIdShortRequired(obj.IdShort); err != nil {
		return err
	}
	for _, el := range obj.DisplayName {
		if err := AssertLangStringNameTypeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Description {
		if err := AssertLangStringTextTypeRequired(el); err != nil {
			return err
		}
	}
	if err := AssertReferenceRequired(obj.SemanticId); err != nil {
		return err
	}
	for _, el := range obj.SupplementalSemanticIds {
		if err := AssertReferenceRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Qualifiers {
		if err := AssertQualifierRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.EmbeddedDataSpecifications {
		if err := AssertEmbeddedDataSpecificationRequired(el); err != nil {
			return err
		}
	}
	if err := AssertReferenceRequired(obj.First); err != nil {
		return err
	}
	if err := AssertReferenceRequired(obj.Second); err != nil {
		return err
	}
	for _, el := range obj.Annotations {
		if err := AssertDataElementChoiceRequired(el); err != nil {
			return err
		}
	}
	if err := AssertReferenceRequired(obj.Observed); err != nil {
		return err
	}
	if err := AssertReferenceRequired(obj.MessageBroker); err != nil {
		return err
	}
	for _, el := range obj.Value {
		if err := AssertSubmodelElementChoiceRequired(el); err != nil {
			return err
		}
	}
	if err := AssertFileAllOfContentTypeRequired(obj.ContentType); err != nil {
		return err
	}
	for _, el := range obj.Statements {
		if err := AssertSubmodelElementChoiceRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SpecificAssetIds {
		if err := AssertSpecificAssetIdRequired(el); err != nil {
			return err
		}
	}
	if err := AssertReferenceRequired(obj.ValueId); err != nil {
		return err
	}
	for _, el := range obj.InputVariables {
		if err := AssertOperationVariableRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.OutputVariables {
		if err := AssertOperationVariableRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.InoutputVariables {
		if err := AssertOperationVariableRequired(el); err != nil {
			return err
		}
	}
	if err := AssertReferenceRequired(obj.SemanticIdListElement); err != nil {
		return err
	}
	return nil
}

// AssertSubmodelElementChoiceConstraints checks if the values respects the defined constraints
func AssertSubmodelElementChoiceConstraints(obj SubmodelElementChoice) error {
	for _, el := range obj.Extensions {
		if err := AssertExtensionConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertReferableAllOfIdShortConstraints(obj.IdShort); err != nil {
		return err
	}
	for _, el := range obj.DisplayName {
		if err := AssertLangStringNameTypeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Description {
		if err := AssertLangStringTextTypeConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertReferenceConstraints(obj.SemanticId); err != nil {
		return err
	}
	for _, el := range obj.SupplementalSemanticIds {
		if err := AssertReferenceConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Qualifiers {
		if err := AssertQualifierConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.EmbeddedDataSpecifications {
		if err := AssertEmbeddedDataSpecificationConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertReferenceConstraints(obj.First); err != nil {
		return err
	}
	if err := AssertReferenceConstraints(obj.Second); err != nil {
		return err
	}
	for _, el := range obj.Annotations {
		if err := AssertDataElementChoiceConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertReferenceConstraints(obj.Observed); err != nil {
		return err
	}
	if err := AssertReferenceConstraints(obj.MessageBroker); err != nil {
		return err
	}
	for _, el := range obj.Value {
		if err := AssertSubmodelElementChoiceConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertFileAllOfContentTypeConstraints(obj.ContentType); err != nil {
		return err
	}
	for _, el := range obj.Statements {
		if err := AssertSubmodelElementChoiceConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SpecificAssetIds {
		if err := AssertSpecificAssetIdConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertReferenceConstraints(obj.ValueId); err != nil {
		return err
	}
	for _, el := range obj.InputVariables {
		if err := AssertOperationVariableConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.OutputVariables {
		if err := AssertOperationVariableConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.InoutputVariables {
		if err := AssertOperationVariableConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertReferenceConstraints(obj.SemanticIdListElement); err != nil {
		return err
	}
	return nil
}
