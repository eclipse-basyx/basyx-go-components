// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DotAAS Part 2 | HTTP/REST | Submodel Repository Service Specification
 *
 * The entire Submodel Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023
 *
 * API version: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 */

package openapi


import (
	"fmt"
)



type EntityType string

// List of EntityType
const (
	ENTITYTYPE_CO_MANAGED_ENTITY EntityType = "CoManagedEntity"
	ENTITYTYPE_SELF_MANAGED_ENTITY EntityType = "SelfManagedEntity"
)

// AllowedEntityTypeEnumValues is all the allowed values of EntityType enum
var AllowedEntityTypeEnumValues = []EntityType{
	"CoManagedEntity",
	"SelfManagedEntity",
}

// validEntityTypeEnumValue provides a map of EntityTypes for fast verification of use input
var validEntityTypeEnumValues = map[EntityType]struct{}{
	"CoManagedEntity": {},
	"SelfManagedEntity": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntityType) IsValid() bool {
	_, ok := validEntityTypeEnumValues[v]
	return ok
}

// NewEntityTypeFromValue returns a pointer to a valid EntityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntityTypeFromValue(v string) (EntityType, error) {
	ev := EntityType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for EntityType: valid values are %v", v, AllowedEntityTypeEnumValues)
}



// AssertEntityTypeRequired checks if the required fields are not zero-ed
func AssertEntityTypeRequired(obj EntityType) error {
	return nil
}

// AssertEntityTypeConstraints checks if the values respects the defined constraints
func AssertEntityTypeConstraints(obj EntityType) error {
	return nil
}
