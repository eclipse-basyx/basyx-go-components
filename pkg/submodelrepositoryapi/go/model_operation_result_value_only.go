// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DotAAS Part 2 | HTTP/REST | Submodel Repository Service Specification
 *
 * The entire Submodel Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) 2023
 *
 * API version: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 */

package openapi




type OperationResultValueOnly struct {

	Messages []Message `json:"messages,omitempty"`

	ExecutionState ExecutionState `json:"executionState,omitempty"`

	Success bool `json:"success,omitempty"`

	// The ValueOnly serialization (patternProperties and propertyNames will be supported probably with OpenApi 3.1). For the full description of the generic JSON validation schema see the ValueOnly-Serialization as defined in the 'Specification of the Asset Administration Shell - Part 2'.
	InoutputArguments map[string]interface{} `json:"inoutputArguments,omitempty"`

	// The ValueOnly serialization (patternProperties and propertyNames will be supported probably with OpenApi 3.1). For the full description of the generic JSON validation schema see the ValueOnly-Serialization as defined in the 'Specification of the Asset Administration Shell - Part 2'.
	OutputArguments map[string]interface{} `json:"outputArguments,omitempty"`
}

// AssertOperationResultValueOnlyRequired checks if the required fields are not zero-ed
func AssertOperationResultValueOnlyRequired(obj OperationResultValueOnly) error {
	for _, el := range obj.Messages {
		if err := AssertMessageRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertOperationResultValueOnlyConstraints checks if the values respects the defined constraints
func AssertOperationResultValueOnlyConstraints(obj OperationResultValueOnly) error {
	for _, el := range obj.Messages {
		if err := AssertMessageConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
