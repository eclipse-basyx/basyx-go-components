// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DotAAS Part 2 | HTTP/REST | Discovery Service Specification
 *
 * The entire Full Profile of the Discovery Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * API version: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 */

package openapi


import (
	"fmt"
)



type KeyTypes string

// List of KeyTypes
const (
	ANNOTATED_RELATIONSHIP_ELEMENT KeyTypes = "AnnotatedRelationshipElement"
	ASSET_ADMINISTRATION_SHELL KeyTypes = "AssetAdministrationShell"
	BASIC_EVENT_ELEMENT KeyTypes = "BasicEventElement"
	BLOB KeyTypes = "Blob"
	CAPABILITY KeyTypes = "Capability"
	CONCEPT_DESCRIPTION KeyTypes = "ConceptDescription"
	DATA_ELEMENT KeyTypes = "DataElement"
	ENTITY KeyTypes = "Entity"
	EVENT_ELEMENT KeyTypes = "EventElement"
	FILE KeyTypes = "File"
	FRAGMENT_REFERENCE KeyTypes = "FragmentReference"
	GLOBAL_REFERENCE KeyTypes = "GlobalReference"
	IDENTIFIABLE KeyTypes = "Identifiable"
	MULTI_LANGUAGE_PROPERTY KeyTypes = "MultiLanguageProperty"
	OPERATION KeyTypes = "Operation"
	PROPERTY KeyTypes = "Property"
	RANGE KeyTypes = "Range"
	REFERABLE KeyTypes = "Referable"
	REFERENCE_ELEMENT KeyTypes = "ReferenceElement"
	RELATIONSHIP_ELEMENT KeyTypes = "RelationshipElement"
	SUBMODEL KeyTypes = "Submodel"
	SUBMODEL_ELEMENT KeyTypes = "SubmodelElement"
	SUBMODEL_ELEMENT_COLLECTION KeyTypes = "SubmodelElementCollection"
	SUBMODEL_ELEMENT_LIST KeyTypes = "SubmodelElementList"
)

// AllowedKeyTypesEnumValues is all the allowed values of KeyTypes enum
var AllowedKeyTypesEnumValues = []KeyTypes{
	"AnnotatedRelationshipElement",
	"AssetAdministrationShell",
	"BasicEventElement",
	"Blob",
	"Capability",
	"ConceptDescription",
	"DataElement",
	"Entity",
	"EventElement",
	"File",
	"FragmentReference",
	"GlobalReference",
	"Identifiable",
	"MultiLanguageProperty",
	"Operation",
	"Property",
	"Range",
	"Referable",
	"ReferenceElement",
	"RelationshipElement",
	"Submodel",
	"SubmodelElement",
	"SubmodelElementCollection",
	"SubmodelElementList",
}

// validKeyTypesEnumValue provides a map of KeyTypess for fast verification of use input
var validKeyTypesEnumValues = map[KeyTypes]struct{}{
	"AnnotatedRelationshipElement": {},
	"AssetAdministrationShell": {},
	"BasicEventElement": {},
	"Blob": {},
	"Capability": {},
	"ConceptDescription": {},
	"DataElement": {},
	"Entity": {},
	"EventElement": {},
	"File": {},
	"FragmentReference": {},
	"GlobalReference": {},
	"Identifiable": {},
	"MultiLanguageProperty": {},
	"Operation": {},
	"Property": {},
	"Range": {},
	"Referable": {},
	"ReferenceElement": {},
	"RelationshipElement": {},
	"Submodel": {},
	"SubmodelElement": {},
	"SubmodelElementCollection": {},
	"SubmodelElementList": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyTypes) IsValid() bool {
	_, ok := validKeyTypesEnumValues[v]
	return ok
}

// NewKeyTypesFromValue returns a pointer to a valid KeyTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyTypesFromValue(v string) (KeyTypes, error) {
	ev := KeyTypes(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for KeyTypes: valid values are %v", v, AllowedKeyTypesEnumValues)
}



// AssertKeyTypesRequired checks if the required fields are not zero-ed
func AssertKeyTypesRequired(obj KeyTypes) error {
	return nil
}

// AssertKeyTypesConstraints checks if the values respects the defined constraints
func AssertKeyTypesConstraints(obj KeyTypes) error {
	return nil
}
