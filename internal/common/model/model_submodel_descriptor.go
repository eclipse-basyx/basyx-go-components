// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Registry Service Specification
 *
 * The Full Profile of the Asset Administration Shell Registry Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](https://industrialdigitaltwin.org/en/content-hub/aasspecifications).   Copyright: Industrial Digital Twin Association (IDTA) 2025
 *
 * API version: V3.1.1_SSP-001
 * Contact: info@idtwin.org
 */

package model

type SubmodelDescriptor struct {
	Administration AdministrativeInformation `json:"administration,omitempty"`

	Endpoints []Endpoint `json:"endpoints"`

	IdShort string `json:"idShort,omitempty" validate:"regexp=^[a-zA-Z][a-zA-Z0-9_-]*[a-zA-Z0-9_]+$"`

	Id string `json:"id" validate:"regexp=^([\\\\x09\\\\x0a\\\\x0d\\\\x20-\\\\ud7ff\\\\ue000-\\\\ufffd]|\\\\ud800[\\\\udc00-\\\\udfff]|[\\\\ud801-\\\\udbfe][\\\\udc00-\\\\udfff]|\\\\udbff[\\\\udc00-\\\\udfff])*$"`

	SemanticId *Reference `json:"semanticId,omitempty"`

	SupplementalSemanticId []Reference `json:"supplementalSemanticIds,omitempty"`

	Description []LangStringTextType `json:"description,omitempty"`

	DisplayName []LangStringNameType `json:"displayName,omitempty"`

	Extensions []Extension `json:"extensions,omitempty"`
}

// AssertSubmodelDescriptorRequired checks if the required fields are not zero-ed
func AssertSubmodelDescriptorRequired(obj SubmodelDescriptor) error {
	elements := map[string]interface{}{
		"endpoints": obj.Endpoints,
		"id":        obj.Id,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertAdministrativeInformationRequired(obj.Administration); err != nil {
		return err
	}
	for _, el := range obj.Endpoints {
		if err := AssertEndpointRequired(el); err != nil {
			return err
		}
	}
	if obj.SemanticId != nil {
		if err := AssertReferenceRequired(*obj.SemanticId); err != nil {
			return err
		}
	}
	for _, el := range obj.SupplementalSemanticId {
		if err := AssertReferenceRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Description {
		if err := AssertLangStringTextTypeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DisplayName {
		if err := AssertLangStringNameTypeRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Extensions {
		if err := AssertExtensionRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertSubmodelDescriptorConstraints checks if the values respects the defined constraints
func AssertSubmodelDescriptorConstraints(obj SubmodelDescriptor) error {
	if err := AssertAdministrativeInformationConstraints(obj.Administration); err != nil {
		return err
	}
	for _, el := range obj.Endpoints {
		if err := AssertEndpointConstraints(el); err != nil {
			return err
		}
	}
	if obj.SemanticId != nil {
		if err := AssertReferenceConstraints(*obj.SemanticId); err != nil {
			return err
		}
	}
	for _, el := range obj.SupplementalSemanticId {
		if err := AssertReferenceConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Description {
		if err := AssertLangStringTextTypeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DisplayName {
		if err := AssertLangStringNameTypeConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Extensions {
		if err := AssertExtensionConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
